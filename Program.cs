using System;
using System.Text.RegularExpressions;
using System.Linq;
using System.IO;
using System.Security.Cryptography;

#nullable enable

namespace QrCodeGenerator
{
    class Program
    {
        static void Main()
        {
            try
            {
                Console.WriteLine("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?");
                Console.WriteLine("1. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –¥–ª—è —Å—ñ–¥-—Ñ—Ä–∞–∑–∏ (—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è)");
                Console.WriteLine("2. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –∑ —Å—ñ–¥-—Ñ—Ä–∞–∑–æ—é");
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó (1 –∞–±–æ 2): ");
                
                string? option = Console.ReadLine();
                
                if (option == "1")
                {
                    EncryptAndGenerateQR();
                }
                else if (option == "2")
                {
                    DecryptQR();
                }
                else
                {
                    Console.WriteLine("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
            }
        }

        private static void EncryptAndGenerateQR()
        {
            string seedPhrase;
            bool isSeedValid = false;
            do
            {
                Console.WriteLine("\n–í–∏–º–æ–≥–∏ –¥–æ —Å—ñ–¥-—Ñ—Ä–∞–∑–∏:");
                Console.WriteLine("- –ü–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 –∞–±–æ 24 —Å–ª—ñ–≤");
                Console.WriteLine("- –°–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –æ–¥–Ω–∏–º –ø—Ä–æ–±—ñ–ª–æ–º");
                Console.WriteLine("- –¢—ñ–ª—å–∫–∏ —Å–ª–æ–≤–∞ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ BIP-39");
                Console.WriteLine("- –í—Å—ñ —Å–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ");
                
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å—ñ–¥-—Ñ—Ä–∞–∑—É: ");
                seedPhrase = Console.ReadLine() ?? string.Empty;

                try
                {
                    ValidateSeedPhrase(seedPhrase);
                    isSeedValid = true;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } while (!isSeedValid);

            string password;
            bool isPasswordValid = false;
            do
            {
                Console.WriteLine("\n–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—è:");
                Console.WriteLine("- –ú—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (A-Z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞ (a-z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ (0-9)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª (!@#$%^&* —Ç–æ—â–æ)");
                
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å: ");
                password = Console.ReadLine() ?? string.Empty;

                try
                {
                    ValidatePasswordFormat(password);
                    isPasswordValid = true;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } while (!isPasswordValid);

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è QR-–∫–æ–¥—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'seed_qr.png'): ");
            string? qrFilePath = Console.ReadLine();
            
            if (string.IsNullOrWhiteSpace(qrFilePath))
            {
                qrFilePath = "seed_qr.png";
            }
            else if (!qrFilePath.EndsWith(".png", StringComparison.OrdinalIgnoreCase))
            {
                qrFilePath += ".png";
            }

            string encryptedSeed = SeedEncryptor.Encrypt(seedPhrase, password);
            Console.WriteLine($"\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {encryptedSeed}");

            QRCodeGeneratorUtil.GenerateQRCode(encryptedSeed, qrFilePath);
            Console.WriteLine($"‚úÖ QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {qrFilePath}");
        }

        private static void DecryptQR()
        {
            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ QR-–∫–æ–¥—É: ");
            string? qrFilePath = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(qrFilePath))
            {
                Console.WriteLine("‚ùå –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                return;
            }

            string encryptedSeed;
            try
            {
                encryptedSeed = QRCodeReaderUtil.ReadQRCode(qrFilePath);
            }
            catch (FileNotFoundException ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å: ");
            string? password = Console.ReadLine();

            if (string.IsNullOrEmpty(password))
            {
                Console.WriteLine("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                return;
            }

            try
            {
                string decryptedSeed = SeedEncryptor.Decrypt(encryptedSeed, password);
                Console.WriteLine($"\n‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {decryptedSeed}");
            }
            catch (CryptographicException)
            {
                Console.WriteLine("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {ex.Message}");
            }
        }

        private static void ValidateSeedPhrase(string seedPhrase)
        {
            if (string.IsNullOrEmpty(seedPhrase))
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é");

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
            if (seedPhrase.StartsWith(" ") || seedPhrase.EndsWith(" ") || seedPhrase.Contains("  "))
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏");

            // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Å–ª–æ–≤–∞
            var words = seedPhrase.Split(' ');

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—ñ–≤
            if (words.Length != 12 && words.Length != 24)
                throw new ArgumentException($"–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –ø–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 –∞–±–æ 24 —Å–ª—ñ–≤ (–∑–∞—Ä–∞–∑ {words.Length})");

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞
            foreach (var word in words)
            {
                if (string.IsNullOrEmpty(word))
                    throw new ArgumentException("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—î —Å–ª–æ–≤–æ");

                if (!Regex.IsMatch(word, "^[a-z]+$"))
                    throw new ArgumentException($"–°–ª–æ–≤–æ '{word}' –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ (–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏)");

                if (!Bip39Words.IsValidWord(word))
                    throw new ArgumentException($"–°–ª–æ–≤–æ '{word}' –≤—ñ–¥—Å—É—Ç–Ω—î –≤ —Å–ª–æ–≤–Ω–∏–∫—É BIP-39");
            }
        }

        private static void ValidatePasswordFormat(string password)
        {
            if (string.IsNullOrEmpty(password))
                throw new ArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");

            var errors = new System.Collections.Generic.List<string>();

            if (password.Length < 12)
                errors.Add("–ü–∞—Ä–æ–ª—å –∑–∞–∫–æ—Ä–æ—Ç–∫–∏–π (–ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤)");

            if (!Regex.IsMatch(password, "[A-Z]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É");

            if (!Regex.IsMatch(password, "[a-z]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É");

            if (!Regex.IsMatch(password, "[0-9]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É");

            if (!Regex.IsMatch(password, "[^A-Za-z0-9]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª");

            if (errors.Count > 0)
                throw new ArgumentException(string.Join("\n", errors));
        }
    }
}
