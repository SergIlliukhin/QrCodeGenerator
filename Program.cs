using System;
using System.Text.RegularExpressions;
using System.Linq;
using System.IO;
using System.Security.Cryptography;
using System.Diagnostics.CodeAnalysis;

#nullable enable

namespace QrCodeGenerator
{
    sealed class Program
    {
        [SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "Need to catch all exceptions in the main entry point to prevent application crash")]
        static void Main()
        {
            try
            {
                Console.WriteLine("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?");
                Console.WriteLine("1. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –¥–ª—è —Å—ñ–¥-—Ñ—Ä–∞–∑–∏ (—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è)");
                Console.WriteLine("2. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –∑ —Å—ñ–¥-—Ñ—Ä–∞–∑–æ—é");
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó (1 –∞–±–æ 2): ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        EncryptAndGenerateQR();
                        break;
                    case "2":
                        DecryptQR();
                        break;
                    default:
                        Console.WriteLine("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.");
                        break;
                }
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ex.Message}");
            }
            catch (IOException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É: {ex.Message}");
            }
            catch (UnauthorizedAccessException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {ex.Message}");
            }
            catch (CryptographicException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
                Console.WriteLine("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü—é –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.");
            }
        }

        private static void EncryptAndGenerateQR()
        {
            string seedPhrase;
            bool isSeedValid = false;
            do
            {
                Console.WriteLine("\n–í–∏–º–æ–≥–∏ –¥–æ —Å—ñ–¥-—Ñ—Ä–∞–∑–∏:");
                Console.WriteLine("- –ü–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 –∞–±–æ 24 —Å–ª—ñ–≤");
                Console.WriteLine("- –°–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –æ–¥–Ω–∏–º –ø—Ä–æ–±—ñ–ª–æ–º");
                Console.WriteLine("- –¢—ñ–ª—å–∫–∏ —Å–ª–æ–≤–∞ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ BIP-39");
                Console.WriteLine("- –í—Å—ñ —Å–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ");
                
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å—ñ–¥-—Ñ—Ä–∞–∑—É: ");
                seedPhrase = Console.ReadLine() ?? string.Empty;

                try
                {
                    ValidateSeedPhrase(seedPhrase);
                    isSeedValid = true;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } while (!isSeedValid);

            string password;
            bool isPasswordValid = false;
            do
            {
                Console.WriteLine("\n–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—è:");
                Console.WriteLine("- –ú—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (A-Z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞ (a-z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ (0-9)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª (!@#$%^&* —Ç–æ—â–æ)");
                
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å: ");
                password = Console.ReadLine() ?? string.Empty;

                try
                {
                    ValidatePasswordFormat(password);
                    isPasswordValid = true;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } while (!isPasswordValid);

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è QR-–∫–æ–¥—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'seed_qr.png'): ");
            string? qrFilePath = Console.ReadLine();
            
            if (string.IsNullOrWhiteSpace(qrFilePath))
            {
                qrFilePath = "seed_qr.png";
            }
            else if (!qrFilePath.EndsWith(".png", StringComparison.OrdinalIgnoreCase))
            {
                qrFilePath += ".png";
            }

            string encryptedSeed = SeedEncryptor.Encrypt(seedPhrase, password);
            Console.WriteLine($"\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {encryptedSeed}");

            QRCodeGeneratorUtil.GenerateQRCode(encryptedSeed, qrFilePath);
            Console.WriteLine($"‚úÖ QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {qrFilePath}");
        }

        [SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "Need to catch all exceptions to provide user-friendly error messages")]
        private static void DecryptQR()
        {
            try
            {
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ QR-–∫–æ–¥—É: ");
                var qrFilePath = Console.ReadLine()?.Trim() ?? throw new ArgumentException("–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");

                if (!File.Exists(qrFilePath))
                {
                    throw new FileNotFoundException("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", qrFilePath);
                }

                var encryptedSeed = QRCodeReaderUtil.ReadQRCode(qrFilePath);
                if (string.IsNullOrEmpty(encryptedSeed))
                {
                    throw new InvalidOperationException("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ QR-–∫–æ–¥");
                }

                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: ");
                var password = Console.ReadLine() ?? throw new ArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");

                ValidatePasswordFormat(password);

                var decryptedSeed = SeedEncryptor.Decrypt(encryptedSeed, password);
                Console.WriteLine($"\n‚úÖ –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {decryptedSeed}");
            }
            catch (FileNotFoundException ex)
            {
                Console.WriteLine($"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ex.Message}");
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {ex.Message}");
            }
            catch (CryptographicException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {ex.Message}");
            }
            catch (IOException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
                Console.WriteLine("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü—é –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.");
            }
        }

        private static void ValidateSeedPhrase(string seedPhrase)
        {
            if (string.IsNullOrEmpty(seedPhrase))
            {
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é");
            }

            if (seedPhrase.StartsWith(' ') || seedPhrase.EndsWith(' ') || seedPhrase.Contains("  ", StringComparison.Ordinal))
            {
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É/–≤ –∫—ñ–Ω—Ü—ñ –∞–±–æ –ø–æ–¥–≤—ñ–π–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏");
            }

            var words = seedPhrase.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (words.Length != 12 && words.Length != 24)
            {
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ 12 –∞–±–æ 24 —Å–ª–æ–≤–∞");
            }

            if (!words.All(word => Bip39Words.IsValidWord(word)))
            {
                throw new ArgumentException("–°—ñ–¥-—Ñ—Ä–∞–∑–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥—ñ–π—Å–Ω—ñ —Å–ª–æ–≤–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Å–ª–æ–≤–∞ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É BIP-39");
            }
        }

        private static void ValidatePasswordFormat(string password)
        {
            if (string.IsNullOrEmpty(password))
                throw new ArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");

            var errors = new System.Collections.Generic.List<string>();

            if (password.Length < 12)
                errors.Add("–ü–∞—Ä–æ–ª—å –∑–∞–∫–æ—Ä–æ—Ç–∫–∏–π (–ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤)");

            if (!Regex.IsMatch(password, "[A-Z]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É");

            if (!Regex.IsMatch(password, "[a-z]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É");

            if (!Regex.IsMatch(password, "[0-9]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É");

            if (!Regex.IsMatch(password, "[^A-Za-z0-9]"))
                errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª");

            if (errors.Count > 0)
                throw new ArgumentException(string.Join("\n", errors));
        }
    }
}
