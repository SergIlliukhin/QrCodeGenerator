using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Security.Cryptography;

namespace QrCodeGenerator
{
    internal static class UserInterface
    {
        public static void Run()
        {
            bool continueProgram = true;
            while (continueProgram)
            {
                try
                {
                    Console.Clear();
                    Console.WriteLine("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?");
                    Console.WriteLine("1. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –¥–ª—è —Å—ñ–¥-—Ñ—Ä–∞–∑–∏ (—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è)");
                    Console.WriteLine("2. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥ –∑ —Å—ñ–¥-—Ñ—Ä–∞–∑–æ—é");
                    Console.WriteLine("3. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Å—ñ–¥-—Ñ—Ä–∞–∑–æ—é");
                    Console.WriteLine("4. –í–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏");
                    Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó (1, 2, 3 –∞–±–æ 4): ");

                    var choice = Console.ReadLine();
                    switch (choice)
                    {
                        case "1":
                            EncryptAndGenerateQR();
                            break;
                        case "2":
                            DecryptQR();
                            break;
                        case "3":
                            DecryptText();
                            break;
                        case "4":
                            continueProgram = false;
                            Console.WriteLine("\n–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏!");
                            break;
                        default:
                            Console.WriteLine("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1, 2, 3 –∞–±–æ 4.");
                            Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                            Console.ReadKey();
                            break;
                    }

                    if (continueProgram && choice is "1" or "2" or "3")
                    {
                        Console.WriteLine("\n–ë–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ —â–µ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é? (y/n)");
                        var answer = Console.ReadLine()?.ToUpperInvariant();
                        continueProgram = answer is "Y" or "YES";
                        
                        if (!continueProgram)
                        {
                            Console.WriteLine("\n–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏!");
                        }
                    }
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ex.Message}");
                    Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                    Console.ReadKey();
                }
                catch (IOException ex)
                {
                    Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                    Console.ReadKey();
                }
                catch (UnauthorizedAccessException ex)
                {
                    Console.WriteLine($"\n‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                    Console.ReadKey();
                }
                catch (CryptographicException ex)
                {
                    Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {ex.Message}");
                    Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                    Console.ReadKey();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
                    Console.WriteLine("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü—é –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.");
                    Console.WriteLine("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...");
                    Console.ReadKey();
                    throw;
                }
            }
        }

        private static void EncryptAndGenerateQR()
        {
            string seedPhrase = SeedPhraseManager.ReadSeedPhrase();
            string password = SeedPhraseManager.ReadPassword();
            string qrFilePath = SeedPhraseManager.GetValidQrFilePath();

            string encryptedSeed = SeedEncryptor.Encrypt(seedPhrase, password);
            Console.WriteLine($"\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {encryptedSeed}");

            QRCodeGeneratorUtil.GenerateQRCode(encryptedSeed, qrFilePath);
            Console.WriteLine($"‚úÖ QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {qrFilePath}");
        }

        private static void DecryptQR()
        {
            string? qrFilePath = null;
            while (qrFilePath == null)
            {
                try
                {
                    Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ QR-–∫–æ–¥—É: ");
                    qrFilePath = Console.ReadLine()?.Trim();
                    
                    if (string.IsNullOrEmpty(qrFilePath))
                    {
                        throw new ArgumentException("–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                    }

                    if (!File.Exists(qrFilePath))
                    {
                        throw new FileNotFoundException("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", qrFilePath);
                    }
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    qrFilePath = null;
                }
                catch (FileNotFoundException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    qrFilePath = null;
                }
                catch (IOException ex)
                {
                    Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    qrFilePath = null;
                }
                catch (UnauthorizedAccessException ex)
                {
                    Console.WriteLine($"\n‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    qrFilePath = null;
                }
            }

            string? encryptedSeed = null;
            while (encryptedSeed == null)
            {
                try
                {
                    if (qrFilePath == null)
                    {
                        throw new InvalidOperationException("–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                    }

                    encryptedSeed = QRCodeReaderUtil.ReadQRCode(qrFilePath);
                    if (string.IsNullOrEmpty(encryptedSeed))
                    {
                        throw new InvalidOperationException("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ QR-–∫–æ–¥");
                    }
                }
                catch (InvalidOperationException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–ë–∞–∂–∞—î—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª? (y/n)");
                    var retry = Console.ReadLine()?.ToUpperInvariant();
                    if (retry is not ("Y" or "YES"))
                    {
                        throw;
                    }
                    qrFilePath = null;
                    while (qrFilePath == null)
                    {
                        try
                        {
                            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ QR-–∫–æ–¥—É: ");
                            qrFilePath = Console.ReadLine()?.Trim();
                            
                            if (string.IsNullOrEmpty(qrFilePath))
                            {
                                throw new ArgumentException("–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                            }

                            if (!File.Exists(qrFilePath))
                            {
                                throw new FileNotFoundException("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", qrFilePath);
                            }
                        }
                        catch (ArgumentException innerEx)
                        {
                            Console.WriteLine($"\n‚ùå {innerEx.Message}");
                            Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                            qrFilePath = null;
                        }
                        catch (FileNotFoundException innerEx)
                        {
                            Console.WriteLine($"\n‚ùå {innerEx.Message}");
                            Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                            qrFilePath = null;
                        }
                        catch (IOException innerEx)
                        {
                            Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {innerEx.Message}");
                            Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                            qrFilePath = null;
                        }
                        catch (UnauthorizedAccessException innerEx)
                        {
                            Console.WriteLine($"\n‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {innerEx.Message}");
                            Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                            qrFilePath = null;
                        }
                    }
                }
                catch (IOException ex)
                {
                    Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–ë–∞–∂–∞—î—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª? (y/n)");
                    var retry = Console.ReadLine()?.ToUpperInvariant();
                    if (retry is not ("Y" or "YES"))
                    {
                        throw;
                    }
                    qrFilePath = null;
                }
                catch (UnauthorizedAccessException ex)
                {
                    Console.WriteLine($"\n‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É: {ex.Message}");
                    Console.WriteLine("–ë–∞–∂–∞—î—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª? (y/n)");
                    var retry = Console.ReadLine()?.ToUpperInvariant();
                    if (retry is not ("Y" or "YES"))
                    {
                        throw;
                    }
                    qrFilePath = null;
                }
            }

            string? password = null;
            while (password == null)
            {
                try
                {
                    password = SeedPhraseManager.ReadPassword();
                    string decryptedSeed = SeedEncryptor.Decrypt(encryptedSeed, password);
                    Console.WriteLine($"\n‚úÖ –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {decryptedSeed}");
                }
                catch (CryptographicException)
                {
                    Console.WriteLine("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    password = null;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    password = null;
                }
            }
        }

        private static void DecryptText()
        {
            string? encryptedText = null;
            while (encryptedText == null)
            {
                try
                {
                    Console.WriteLine("\n–í–≤–µ–¥—ñ—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:");
                    encryptedText = Console.ReadLine();
                    if (string.IsNullOrEmpty(encryptedText))
                    {
                        throw new ArgumentException("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");
                    }
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    encryptedText = null;
                }
            }

            string? password = null;
            while (password == null)
            {
                try
                {
                    password = SeedPhraseManager.ReadPassword();
                    string decryptedSeed = SeedEncryptor.Decrypt(encryptedText, password);
                    Console.WriteLine($"\n‚úÖ –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {decryptedSeed}");
                }
                catch (CryptographicException)
                {
                    Console.WriteLine("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    password = null;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    password = null;
                }
            }
        }
    }
} 