using System;
using System.Text.RegularExpressions;

class Program
{
    static void Main()
    {
        try
        {
            Console.Write("–í–≤–µ–¥—ñ—Ç—å —Å—ñ–¥-—Ñ—Ä–∞–∑—É: ");
            string seedPhrase = Console.ReadLine();

            string password;
            bool isPasswordValid = false;
            do
            {
                Console.WriteLine("\n–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—è:");
                Console.WriteLine("- –ú—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (A-Z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞ (a-z)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ (0-9)");
                Console.WriteLine("- –•–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª (!@#$%^&* —Ç–æ—â–æ)");
                
                Console.Write("\n–í–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å: ");
                password = Console.ReadLine();

                try
                {
                    ValidatePasswordFormat(password);
                    isPasswordValid = true;
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine($"\n‚ùå {ex.Message}");
                    Console.WriteLine("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } while (!isPasswordValid);

            Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è QR-–∫–æ–¥—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'seed_qr.png'): ");
            string qrFilePath = Console.ReadLine();
            
            if (string.IsNullOrWhiteSpace(qrFilePath))
            {
                qrFilePath = "seed_qr.png";
            }
            else if (!qrFilePath.EndsWith(".png", StringComparison.OrdinalIgnoreCase))
            {
                qrFilePath += ".png";
            }

            string encryptedSeed = SeedEncryptor.Encrypt(seedPhrase, password);
            Console.WriteLine($"\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —Å—ñ–¥-—Ñ—Ä–∞–∑–∞: {encryptedSeed}");

            QRCodeGeneratorUtil.GenerateQRCode(encryptedSeed, qrFilePath);
            Console.WriteLine($"‚úÖ QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {qrFilePath}");
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ex.Message}");
        }
        catch (System.Security.Cryptography.CryptographicException ex)
        {
            Console.WriteLine($"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
        }
    }

    private static void ValidatePasswordFormat(string password)
    {
        if (string.IsNullOrEmpty(password))
            throw new ArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º");

        var errors = new System.Collections.Generic.List<string>();

        if (password.Length < 12)
            errors.Add("–ü–∞—Ä–æ–ª—å –∑–∞–∫–æ—Ä–æ—Ç–∫–∏–π (–ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤)");

        if (!Regex.IsMatch(password, "[A-Z]"))
            errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É");

        if (!Regex.IsMatch(password, "[a-z]"))
            errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É");

        if (!Regex.IsMatch(password, "[0-9]"))
            errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É");

        if (!Regex.IsMatch(password, "[^A-Za-z0-9]"))
            errors.Add("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª");

        if (errors.Count > 0)
            throw new ArgumentException(string.Join("\n", errors));
    }
}
